{"version":3,"sources":["components/TodoList/TodoListItem/TodoListItem.module.css","components/Button/Button.module.css","components/TodoList/TodoList.module.css","components/Input/Input.module.css","components/Form/Form.module.css","components/Alert/Alert.module.css","components/Input/Input.tsx","components/Button/Button.tsx","redux/toodList/types/types.ts","components/Form/Form.tsx","components/TodoList/TodoListItem/TodoListItem.tsx","redux/toodList/store/actions/todosActions.ts","components/Alert/Alert.tsx","components/TodoList/TodoList.tsx","redux/toodList/store/reducer.ts","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Input","onChange","value","className","cls","input","Button","text","onClick","buttonTodo","buttonForm","button","ADD_TODO","ADD_TEXT_TODO","ALERT","ID_CURRENT_TODO","TEXT_CURRENT_TODO","COMPLETE_ALL_TODOS","DELETE_ALL_TODOS","REDACT_TODO","CHECK_TODO","DELETE_TODO","COMPLETE_TODO","SHOW_TODO_TIME","Form","useSelector","state","textTodo","currentRedactTodoText","dispatch","useDispatch","Math","random","toString","substring","Date","toLocaleDateString","toLocaleTimeString","form","e","target","type","showAlert","TodoListItem","id","complete","times","check","redactTodo","showTime","completeTodo","todoItem","onClickDeleteTodo","deleteTodo","onClickCompleteTodo","showTodoTime","time","checked","checkTodo","Alert","alert","TodoList","todos","hasCheckedTodos","some","todo","localStorage","setItem","JSON","stringify","todoList","map","length","blockButton","filter","defaultState","currentRedactTodoId","store","createStore","action","composeWithDevTools","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49926e1f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoItem\":\"TodoListItem_todoItem__315tP\",\"complete\":\"TodoListItem_complete__3Am-L\",\"time\":\"TodoListItem_time__1m21w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3QF_k\",\"buttonForm\":\"Button_buttonForm__AMWhc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoList\":\"TodoList_todoList__1KsE9\",\"blockButton\":\"TodoList_blockButton__l9yQk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__3PNbO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__2TM1N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alert\":\"Alert_alert__1rkHi\"};","import React, {ChangeEventHandler} from 'react'\nimport cls from './Input.module.css'\n\ninterface IProps {\n  value: string;\n  onChange: ChangeEventHandler<HTMLInputElement>;\n}\n\nconst Input = ({onChange, value}:IProps) => {\n  return (\n    <input className={cls.input} onChange={onChange} value={value} />   \n  )\n}\n\nexport default Input\n","import cls from './Button.module.css'\n\ninterface IProps {\n  text: string;\n  onClick: () => void;\n  buttonTodo: boolean;\n}\n\nconst Button = ({text, onClick, buttonTodo}: IProps) => {\n  return (\n    <button className={buttonTodo ? `${cls.buttonForm}` : `${cls.button}`} onClick={onClick}>{text}</button>\n  )\n}\n\nexport default Button\n","export interface ITodo {\n  id: string;\n  text: string;\n  complete: boolean;\n  times: string;\n  check: boolean;\n  showTime: boolean;\n}\n\nexport interface ITodos {\n  todos: ITodo[];\n  textTodo: string;\n  showAlert: boolean;\n  currentRedactTodoId: string;\n  currentRedactTodoText: string;\n}\n\nexport const ADD_TODO = 'addTodo'\nexport const ADD_TEXT_TODO = 'addTodoText'\nexport const ALERT = 'alert'\nexport const CHANGE_TODOS = 'changeTodos'\nexport const ID_CURRENT_TODO = 'getIdTodo'\nexport const TEXT_CURRENT_TODO = 'getTextTodo'\nexport const COMPLETE_ALL_TODOS = 'completeAllTodos'\nexport const DELETE_ALL_TODOS = 'deleteAllTodos'\nexport const REDACT_TODO = 'redactTodo'\nexport const CHECK_TODO = 'checkTodo'\nexport const DELETE_TODO = 'deleteTodo'\nexport const COMPLETE_TODO = 'completeTodo'\nexport const SHOW_TODO_TIME = 'showTodoTime'\n","import Input from '../Input/Input'\nimport Button from '../Button/Button'\nimport cls from './Form.module.css'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  ADD_TEXT_TODO,\n  ADD_TODO,\n  ALERT,\n  TEXT_CURRENT_TODO,\n  ITodos,\n  REDACT_TODO,\n} from '../../redux/toodList/types/types'\n\nconst Form = () => {\n  const { textTodo, currentRedactTodoText} = useSelector((state: ITodos) => state)\n\n  const dispatch = useDispatch()\n\n  const newTodo = {\n    id: Math.random().toString().substring(2),\n    text: textTodo,\n    complete: false,\n    times: `${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`,\n    check: false,\n    showTime: false,\n  }\n\n  const handleTodoText = (text: string) => {\n    if (currentRedactTodoText) {\n      dispatch({ type: TEXT_CURRENT_TODO, text })\n      return\n    }\n    dispatch({ type: ADD_TEXT_TODO, textTodo: text })\n  }\n\n  const addNewTodo = () => {\n    if (currentRedactTodoText) {\n      dispatch({type: REDACT_TODO})\n      return \n    }\n\n    if (textTodo) {\n      dispatch({ type: ADD_TODO, textTodo })\n      dispatch({ type: ALERT, showAlert: false })\n      return\n    }\n    dispatch({ type: ALERT, showAlert: true })\n  }\n\n  return (\n    <div className={cls.form}>\n      <Input\n        value={currentRedactTodoText || textTodo}\n        onChange={(e) => handleTodoText(e.target.value)}\n      />\n      <Button buttonTodo={false} text='Добавить' onClick={addNewTodo} />\n    </div>\n  )\n}\n\nexport default Form\n","import Button from '../../Button/Button'\nimport cls from './TodoListItem.module.css'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  CHECK_TODO,\n  COMPLETE_TODO,\n  SHOW_TODO_TIME,\n} from '../../../redux/toodList/types/types'\nimport { deleteTodo } from '../../../redux/toodList/store/actions/todosActions'\n\ninterface IProps {\n  id: string;\n  text: string;\n  complete: boolean;\n  times: string;\n  check: boolean;\n  showTime: boolean;\n  redactTodo: () => void;\n}\n\nexport const TodoListItem = ({\n  id,\n  text,\n  complete,\n  times,\n  check,\n  redactTodo,\n  showTime,\n}: IProps) => {\n  const completeTodo = complete ? cls.complete : cls.todoItem\n\n  const dispatch = useDispatch()\n\n  const checkTodo = (id: string) => {\n    dispatch({ type: CHECK_TODO, id })\n  }\n\n  const onClickDeleteTodo = (id: string) => {\n    dispatch(deleteTodo(id))\n  }\n\n  const onClickCompleteTodo = (id: string) => {\n    dispatch({ type: COMPLETE_TODO, id })\n  }\n\n  const showTodoTime = (id: string) => {\n    dispatch({ type: SHOW_TODO_TIME, id })\n  }\n\n  return (\n    <div className={cls.todoItem}>\n      <Button\n        buttonTodo={true}\n        text='&#10004;'\n        onClick={() => onClickCompleteTodo(id)}\n      />\n      <div>\n        <p className={completeTodo} onClick={() => showTodoTime(id)}>\n          {text}\n        </p>\n        {showTime ? <p className={cls.time}>Создано: {times}</p> : null}\n      </div>\n      <Button text='&#9998;' buttonTodo={true} onClick={redactTodo} />\n      <input type='checkbox' checked={check} onChange={() => checkTodo(id)} />\n      <Button\n        buttonTodo={true}\n        text='&#10005;'\n        onClick={() => onClickDeleteTodo(id)}\n      />\n    </div>\n  )\n}\n","import { DELETE_TODO } from './../../types/types';\n\nexport const deleteTodo = (id: string) => {\n  return {\n    type: DELETE_TODO,\n    id,\n  }\n}\n","import cls from './Alert.module.css'\ninterface IProps {\n  text: string;\n}\n\nconst Alert = ({ text }: IProps) => {\n  return <p className={cls.alert}>{text}</p>\n}\n\nexport default Alert\n","import Form from '../Form/Form'\nimport { TodoListItem } from './TodoListItem/TodoListItem'\nimport cls from './TodoList.module.css'\nimport Alert from '../Alert/Alert'\nimport Button from '../Button/Button'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  ITodos,\n  ID_CURRENT_TODO,\n  TEXT_CURRENT_TODO,\n  COMPLETE_ALL_TODOS,\n  DELETE_ALL_TODOS,\n} from '../../redux/toodList/types/types'\n\nconst TodoList = () => {\n  const {todos, showAlert} = useSelector((state: ITodos) => state)\n  const dispatch = useDispatch()\n\n  const hasCheckedTodos = todos.some((todo) => todo.check)\n\n  const a = localStorage.setItem('todos', JSON.stringify(todos))\n\n  const completeAllMarkedTodos = () => {\n    dispatch({ type: COMPLETE_ALL_TODOS})\n  }\n\n  const deleteAllMarkedTodos = () => {\n    dispatch({ type: DELETE_ALL_TODOS })\n  }\n\n  const coutnCompleteTodo = () => {\n    const completeTodos = todos.filter((todo) => todo.complete)\n    return completeTodos.length\n  }\n\n  const redactTodo = (text: string, id: string) => {\n    dispatch({ type: ID_CURRENT_TODO, id })\n    dispatch({ type: TEXT_CURRENT_TODO, text })\n  }\n\n  return (\n    <div className={cls.todoList}>\n      <Form />\n      {todos.map((todo) => {\n        return (\n          <TodoListItem\n            text={todo.text}\n            id={todo.id}\n            key={todo.id}\n            showTime={todo.showTime}\n            complete={todo.complete}\n            times={todo.times}\n            check={todo.check}\n            redactTodo={() => redactTodo(todo.text, todo.id)}\n          />\n        )\n      })}\n      {showAlert ? <Alert text={'Напишите задачу'} /> : null}\n      {!todos.length ? <Alert text={'Нет задач'} /> : null}\n      {hasCheckedTodos ? (\n        <div className={cls.blockButton}>\n          <Button buttonTodo={false} onClick={completeAllMarkedTodos} text={'Завершить'} />\n          <Button buttonTodo={false} onClick={deleteAllMarkedTodos} text={'Удалить'} />\n        </div>\n      ) : null}\n      <p>Всего задач: {todos.length}</p>\n      <p>Выполненых задач: {coutnCompleteTodo()}</p>\n    </div>\n  )\n}\n\nexport default TodoList\n","import { createStore } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport {\n  ADD_TEXT_TODO,\n  ADD_TODO,\n  ALERT,\n  ID_CURRENT_TODO,\n  TEXT_CURRENT_TODO,\n  ITodos,\n  COMPLETE_ALL_TODOS,\n  DELETE_ALL_TODOS,\n  REDACT_TODO,\n  CHECK_TODO,\n  DELETE_TODO,\n  COMPLETE_TODO,\n  SHOW_TODO_TIME,\n} from '../types/types'\n\nconst defaultState: ITodos = {\n  todos: [],\n  textTodo: '',\n  showAlert: false,\n  currentRedactTodoId: '',\n  currentRedactTodoText: '',\n}\n\nconst todoReducer = (state = defaultState, action: any) => {\n  if (action.type === ADD_TODO) {\n    \n    const todo = {\n      id: Math.random().toString().substring(2),\n      text: '',\n      complete: false,\n      times: `${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`,\n      check: false,\n      showTime: false,\n    }\n\n    return {\n      ...state,\n      todos: [...state.todos, {...todo, text: action.textTodo}],\n      textTodo: '',\n      currentRedactTodoId: '',\n      currentRedactTodoText: '',\n    }\n  }\n\n  if (action.type === ADD_TEXT_TODO) {\n    return { ...state, textTodo: action.textTodo }\n  }\n\n  if (action.type === ALERT) {\n    return { ...state, showAlert: action.showAlert }\n  }\n\n  if (action.type === ID_CURRENT_TODO) {\n    return { ...state, currentRedactTodoId: action.id }\n  }\n\n  if (action.type === TEXT_CURRENT_TODO) {\n    return { ...state, currentRedactTodoText: action.text }\n  }\n\n  if (action.type === COMPLETE_ALL_TODOS) {\n    return {\n      ...state,\n      todos: state.todos.map((todo) =>\n        todo.check ? { ...todo, complete: !todo.complete } : todo\n      ),\n    }\n  }\n\n  if (action.type === DELETE_ALL_TODOS) {\n    return { ...state, todos: state.todos.filter((todo) => !todo.check) }\n  }\n\n  if (action.type === REDACT_TODO) {\n    return {\n      ...state,\n      todos: state.todos.map((todo) =>\n        todo.id === state.currentRedactTodoId\n          ? { ...todo, text: state.currentRedactTodoText }\n          : todo\n      ),\n      currentRedactTodoId: '',\n      currentRedactTodoText: '',\n    }\n  }\n\n  if (action.type === CHECK_TODO) {\n    return {\n      ...state,\n      todos: state.todos.map((todo) =>\n        action.id === todo.id ? { ...todo, check: !todo.check } : todo\n      ),\n    }\n  }\n\n  if (action.type === DELETE_TODO) {\n    return {\n      ...state,\n      todos: state.todos.filter((todo) => todo.id !== action.id),\n    }\n  }\n\n  if (action.type === COMPLETE_TODO) {\n    return {\n      ...state,\n      todos: state.todos.map((todo) =>\n        todo.id === action.id ? { ...todo, complete: !todo.complete } : todo\n      ),\n    }\n  }\n\n  if (action.type === SHOW_TODO_TIME) {\n    return {\n      ...state,\n      todos: state.todos.map((todo) =>\n        todo.id === action.id ? { ...todo, showTime: !todo.showTime } : todo\n      ),\n    }\n  }\n\n  return state\n}\n\nexport const store = createStore(todoReducer, composeWithDevTools())\n","import './App.css'\nimport TodoList from './components/TodoList/TodoList'\nimport { Provider } from 'react-redux'\nimport { store } from './redux/toodList/store/reducer'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className='app'>\n        <TodoList />\n      </div>\n    </Provider>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}